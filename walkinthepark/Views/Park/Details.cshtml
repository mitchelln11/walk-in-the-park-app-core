@model walkinthepark.Models.Park
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Details";
}
<div class="flex-container">
    <div class="flex-box">
        <div class="header-container">
            <h1>@Model.ParkName</h1>
            <div class="weather-info">
                <h2>Current Weather</h2>
                <div>
                    <span>@Model.CurrentWeatherInfo.Temperature &deg;F | </span>
                    <span>@Model.CurrentWeatherInfo.Condition | </span>
                    <span>Wind: @Model.CurrentWeatherInfo.Wind mph</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="flex-container">
    <div class="flex-box">
        <div class="content-box">
            @Html.ActionLink("Add Park to Wish List", "AddParkToWishList", "Hiker", new { @id = Model.ParkId }, new { @class = "btn btn-default" })
            <h3>Located in: @Model.ParkState</h3>
            <p>@Model.ParkDescription</p>
        </div>
    </div>

    @{
        // Create an empty list for the marker values to add into
        List<walkinthepark.Models.ParkMarkers> parkMarkers = new List<walkinthepark.Models.ParkMarkers>();
    }
    <div class="flex-box solo-park-map">
        <div id="map"></div>
    </div>
</div>

<div class="flex-container">
    <div class="flex-box">
        <div class="park-header">
            <h2>Trails available at <em>@Model.ParkName</em></h2>
        </div>
    </div>
</div>

<div class="flex-container">
    <div class="flex-box">
        <div class="content-box">
            <input type="button" value="Fetch Trails" onclick="location.href='@Url.Action("FetchTrailsApi", "HikingTrail", new { id = Model.ParkId })'" />
        </div>
    </div>
</div>

@*<div class="flex-container">
    <div class="flex-box">
        <table class="table lengthy-table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.HikingTrail[0].TrailName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.HikingTrail[0].TrailDifficulty)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.HikingTrail[0].TrailLength)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.HikingTrail[0].TrailCondition)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.HikingTrail[0].TrailSummary)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.HikingTrail)
                {

                    <tr>
                        <td>
                            @item.TrailName
                        </td>
                        <td>
                            @item.TrailDifficulty
                        </td>
                        <td>
                            @item.TrailLength
                        </td>
                        <td>
                            @item.TrailCondition
                        </td>
                        <td>
                            @item.TrailSummary
                        </td>
                        @Html.HiddenFor(modelItem => item.TrailId)
                        @Html.HiddenFor(modelItem => item.HikingApiCode)
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>*@

<div class="flex-container">
    <div class="flex-box">
        <div class="content-box">
            @Html.ActionLink("Back to Parks", "Index", "Park")

            @Html.HiddenFor(model => model.ParkLatitude)
            @Html.HiddenFor(model => model.ParkLongitude)
        </div>
    </div>
</div>

<script>
var map;
function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: @Model.ParkLatitude, lng: @Model.ParkLongitude }, // General Middle of the US
        zoom: 5
    });

    marker = new google.maps.Marker({
        position: { lat: @Model.ParkLatitude, lng: @Model.ParkLongitude },
    map: map
    });

}
</script>
<script src='https://maps.googleapis.com/maps/api/js?key=@(ViewData["GoogleMapsJsKey"])&callback=initMap' async defer type="text/javascript"></script>
