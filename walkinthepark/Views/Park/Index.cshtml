@model IEnumerable<walkinthepark.Models.Park>

@{
    ViewData["Title"] = "Index";
}

<div class="flex-box">
    <div class="content-box">
    <h1>United States National Parks</h1>
    <input type="button" value="Fetch Parks" onclick="location.href='@Url.Action("FetchParkApi", "Park")'" />
    </div>

    @{
        // Create an empty list for the marker values to add into
        List<walkinthepark.Models.ParkMarkers> parkMarkers = new List<walkinthepark.Models.ParkMarkers>();
    }
    @* Map with markers will generate inside map id *@
    <div id="map">
    </div>
    <div class="clearfix"></div>

    @*<div class="container-fluid">
        <div class="flex-container">
            <div class="panel-body">
                <div class="form-horizontal">
                    <h4>Park</h4>
                    <hr />

                    <div class="form-group">
                        <div class="flex-container">
                            <div class="state-filter-box">
                                @Html.LabelFor(model => model.SelectedState)
                            </div>
                            <div class="state-filter-box">
                                @Html.DropDownListFor(model => model., Model., "Please Select State")
                            </div>
                            <div class="state-filter-box">
                                <input type="submit" value="Filter" class="btn btn-default" />
                            </div>
                            <div class="state-filter-box">
                                @Html.ActionLink("See All Parks", "Index", "Parks", null, new { @class = "btn btn-default" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ParkName)
                <th>
                    @Html.DisplayNameFor(model => model.ParkState)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                // Add Markers
                ParkMarkers parkMarker = new ParkMarkers();
                //Assign required parameters
                parkMarker.ParkLatitude = item.ParkLatitude;
                parkMarker.ParkLongitude = item.ParkLongitude;
                //Actually add all three values together into the parkMarker object
                parkMarkers.Add(parkMarker);
                <tr>
                    <td>
                        @item.ParkName
                    </td>
                    <td>
                        @item.ParkState
                    </td>

                    @Html.HiddenFor(modelItem => item.ParkLongitude)
                    @Html.HiddenFor(modelItem => item.ParkLongitude)

                    <td>
                        @Html.ActionLink("Details", "Details", new { id = item.ParkId })
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    var map;
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 39.8283, lng: -98.5795 }, // General Middle of the US
            zoom: 4
        });

        //Loop through each marker and instantiate the actual marker call from Google Maps API
        @foreach (var marker in parkMarkers)
        {
            // <Text> needed because it can't be used in tables
            <text>
            marker = new google.maps.Marker({
                position: { lat: @marker.ParkLatitude, lng: @marker.ParkLongitude },
            map: map
            });
            </text>
        }

    }
</script>

<script src='https://maps.googleapis.com/maps/api/js?key=@(ViewData["GoogleMapsJsKey"])&callback=initMap' async defer type="text/javascript"></script>